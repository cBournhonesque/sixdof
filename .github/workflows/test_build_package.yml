name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-test-
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libasound2-dev libudev-dev pkg-config
    
    - name: Run tests
      run: cargo test --verbose

  build:
    needs: test
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: launcher-linux
            asset_dest: assets
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: launcher-windows
            asset_dest: assets
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: launcher-macos
            asset_dest: assets
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-build-
    
    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libasound2-dev libudev-dev pkg-config
    
    - name: Build
      run: cargo build --verbose --release
    
    - name: Copy assets
      run: |
        mkdir -p target/release/${{ matrix.asset_dest }}
        cp -r ./assets/* target/release/${{ matrix.asset_dest }}/
      shell: bash
    
    - name: Prepare release package
      run: |
        mkdir -p release-package/bin
        mkdir -p release-package/assets
        
        # List files to debug
        echo "Files in target/release directory:"
        ls -la target/release/
        
        # Copy binaries based on OS into bin directory
        if [ "${{ matrix.os }}" == "windows-latest" ]; then
          # Copy the launcher executable and any DLLs
          cp target/release/launcher.exe release-package/bin/ 2>/dev/null || echo "launcher.exe not found"
          cp target/release/*.dll release-package/bin/ 2>/dev/null || echo "No .dll files found"
        elif [ "${{ matrix.os }}" == "macos-latest" ]; then
          # Copy the launcher binary
          cp target/release/launcher release-package/bin/ 2>/dev/null || echo "launcher binary not found"
        else  # linux
          # Copy the launcher binary
          cp target/release/launcher release-package/bin/ 2>/dev/null || echo "launcher binary not found"
        fi
        
        # Copy assets folder
        cp -r ./assets/* release-package/assets/ 2>/dev/null || echo "No assets found"
      shell: bash
      
    - name: Create ${{ matrix.artifact_name }} Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: release-package
